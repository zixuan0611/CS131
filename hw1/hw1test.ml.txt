let subset_test0 = subset [] [1;2]
let subset_test1 = subset [3;1] [1;2;3]
let subset_test2 = not (subset [1;3;6] [2;1;3])

let equal_sets_test0 = equal_sets [1;3] [1;3]
let equal_sets_test1 = not (equal_sets [2;3;4] [3;1;3])

let set_union_test0 = equal_sets (set_union [] [1;2]) [1;2]
let set_union_test1 = equal_sets (set_union [1;3] [1;2;3]) [1;2;3]
let set_union_test2 = equal_sets (set_union [] []) []

let set_intersection_test0 =
  equal_sets (set_intersection [] [1;2]) []
let set_intersection_test1 =
  equal_sets (set_intersection [1;3] [1;4;3]) [1;3]
let set_intersection_test2 =
  equal_sets (set_intersection [1;2;3] [3;1;2]) [3;2;1]

let set_diff_test0 = equal_sets (set_diff [1;3] [1;4;3]) []
let set_diff_test1 = equal_sets (set_diff [4;3;1;] [1;3]) [4]
let set_diff_test2 = equal_sets (set_diff [3;1] []) [1;3]
let set_diff_test3 = equal_sets (set_diff [] [3;1]) []

let computed_fixed_point_test0 =
  computed_fixed_point (=) (fun x -> x / 3) 1000000000 = 0
let computed_fixed_point_test1 =
  computed_fixed_point (=) (fun x -> x *. 3.) 1. = infinity


type awksub_nonterminals =
  | Expr | Lvalue | Incrop | Binop | Num

let awksub_rules =
   [Expr, [T"("; N Expr; T")"];
    Expr, [N Num];
    Expr, [N Expr; N Binop; N Expr];
    Expr, [N Lvalue];
    Expr, [N Incrop; N Lvalue];
    Expr, [N Lvalue; N Incrop];
    Lvalue, [T"$"; N Expr];
    Incrop, [T"++"];
    Incrop, [T"--"];
    Binop, [T"+"];
    Binop, [T"-"];
    Num, [T"0"];
    Num, [T"1"];
    Num, [T"2"];
    Num, [T"3"];
    Num, [T"4"];
    Num, [T"5"];
    Num, [T"6"];
    Num, [T"7"]]

let awksub_grammar = Expr, awksub_rules

let awksub_test0 =
  filter_reachable awksub_grammar = awksub_grammar

let awksub_test1 =
  filter_reachable (Expr, List.tl awksub_rules) = (Expr, List.tl awksub_rules)

let awksub_test2 =
  filter_reachable (Lvalue, awksub_rules) = (Lvalue, awksub_rules)

let awksub_test3 =
  filter_reachable (Expr, List.tl (List.tl awksub_rules)) =
    (Expr,
     [Expr, [N Expr; N Binop; N Expr];
      Expr, [N Lvalue];
      Expr, [N Incrop; N Lvalue];
      Expr, [N Lvalue; N Incrop];
      Lvalue, [T "$"; N Expr];
      Incrop, [T "++"];
      Incrop, [T "--"];
      Binop, [T "+"];
      Binop, [T "-"]])

let awksub_test4 =
  filter_reachable (Expr, List.tl (List.tl (List.tl awksub_rules))) =
    (Expr,
     [Expr, [N Lvalue];
      Expr, [N Incrop; N Lvalue];
      Expr, [N Lvalue; N Incrop];
      Lvalue, [T "$"; N Expr];
      Incrop, [T "++"];
      Incrop, [T "--"]])

type giant_nonterminals =
  | Conversation | Sentence | Grunt | Snore | Shout | Lijian

let giant_grammar =
  Conversation,
  [Snore, [T"ZZZ"];
   Lijian, [];
   Grunt, [T"khrgh"];
   Shout, [T"aooogah!"];
   Sentence, [N Lijian];
   Sentence, [N Grunt];
   Sentence, [N Shout];
   Conversation, [N Snore];
   Conversation, [N Sentence; T","; N Conversation]]

let giant_test0 =
  filter_reachable giant_grammar = giant_grammar

let giant_test1 =
  filter_reachable (Sentence, List.tl (snd giant_grammar)) =
    (Sentence,
     [Lijian, []; Grunt, [T "khrgh"]; Shout, [T "aooogah!"];
      Sentence, [N Lijian]; Sentence, [N Grunt]; Sentence, [N Shout]])

let giant_test2 =
  filter_reachable (Lijian, snd giant_grammar) = (Lijian, [Lijian, []])
